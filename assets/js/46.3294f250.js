(window.webpackJsonp=window.webpackJsonp||[]).push([[46],{382:function(e,t,o){"use strict";o.r(t);var i=o(9),a=Object(i.a)({},(function(){var e=this,t=e._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"week-4-git-part-2-of-3"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#week-4-git-part-2-of-3"}},[e._v("#")]),e._v(" Week 4 - Git (part 2 of 3)")]),e._v(" "),t("div",{staticClass:"custom-block tip"},[t("p",{staticClass:"custom-block-title"},[e._v("Date")]),e._v(" "),t("p",[e._v("5 February 2024")])]),e._v(" "),t("h2",{attrs:{id:"gitquest-the-epic-code-expedition-30-min"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#gitquest-the-epic-code-expedition-30-min"}},[e._v("#")]),e._v(" GitQuest: The Epic Code Expedition (30 min)")]),e._v(" "),t("ul",[t("li",[e._v("Create a folder "),t("code",[e._v("intro-to-git")]),e._v(" in your "),t("code",[e._v("Documents/code")]),e._v(" folder.")]),e._v(" "),t("li",[e._v("Download and move the "),t("code",[e._v("main.js")]),e._v(" from "),t("code",[e._v("Slack in mad9112 channel")]),e._v(" to the "),t("code",[e._v("intro-to-git")]),e._v(" folder.")]),e._v(" "),t("li",[e._v("Head over to GitHub.com, and create a new private repository, "),t("code",[e._v("intro-to-git.")])]),e._v(" "),t("li",[e._v("Back to the folder "),t("code",[e._v("intro-to-git")]),e._v(" on your Mac, and follow all the steps given in GitHub.com to upload your folder on git. Additionally, go to "),t("code",[e._v("Settings")]),e._v(" -> "),t("code",[e._v("Collaborators")]),e._v(" -> "),t("code",[e._v("Add People")]),e._v(" -> "),t("code",[e._v("shah0150")]),e._v(".")]),e._v(" "),t("li",[e._v("Back to our Mac, create a branch "),t("code",[e._v("yourusername-git-1")])]),e._v(" "),t("li",[e._v("Checkout "),t("code",[e._v("yourusername-git-1")]),e._v(" and confirm you are on the branch")]),e._v(" "),t("li",[e._v("Solve the interview question")]),e._v(" "),t("li",[e._v("Once done, upload the code to the correct Github branch.")]),e._v(" "),t("li",[e._v("Open up a pull request and invite "),t("code",[e._v("shah0150")])]),e._v(" "),t("li",[e._v("Wait for the "),t("code",[e._v("shah0150")]),e._v(" message on your pull request and merge completion.")])]),e._v(" "),t("h2",{attrs:{id:"activity-merge-the-pull-request"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#activity-merge-the-pull-request"}},[e._v("#")]),e._v(" Activity: Merge the pull request")]),e._v(" "),t("ul",[t("li",[e._v("Click "),t("code",[e._v("Merge pull request")]),e._v(".")]),e._v(" "),t("li",[e._v("Click "),t("code",[e._v("Confirm merge")]),e._v(".")]),e._v(" "),t("li",[e._v("Once your branch has been merged, you don't need it anymore. To delete this branch, click "),t("code",[e._v("Delete")]),e._v(" branch.")])]),e._v(" "),t("h2",{attrs:{id:"resolve-merge-conflicts"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#resolve-merge-conflicts"}},[e._v("#")]),e._v(" Resolve merge conflicts")]),e._v(" "),t("p",[t("em",[e._v("Learn why conflicts happen and how to resolve them.")])]),e._v(" "),t("p",[t("strong",[e._v("What is a merge conflict?: A merge conflict occurs when changes are made to the same part of the same file on two different branches. You usually find out about conflicts in a pull request so let's start by creating one.")])]),e._v(" "),t("h3",{attrs:{id:"activity"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#activity"}},[e._v("#")]),e._v(" Activity")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("git status")])]),e._v(" "),t("li",[e._v("In the "),t("code",[e._v("intro-to-git")]),e._v(" project directory in your text editor, in the main.js file, add a comment “Green is the fourth color of the rainbow.” Then save the file.")]),e._v(" "),t("li",[t("code",[e._v("git status")])]),e._v(" "),t("li",[t("code",[e._v("git switch main")])])]),e._v(" "),t("h2",{attrs:{id:"course-to-do-in-class"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#course-to-do-in-class"}},[e._v("#")]),e._v(" Course to do in class")]),e._v(" "),t("p",[t("a",{attrs:{href:"https://github.com/skills/resolve-merge-conflicts",target:"_blank",rel:"noopener noreferrer"}},[e._v("Resolve merge conflicts Course"),t("OutboundLink")],1)]),e._v(" "),t("h2",{attrs:{id:"github-copilot-your-ai-pair-programmer"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#github-copilot-your-ai-pair-programmer"}},[e._v("#")]),e._v(" GitHub Copilot | Your AI pair programmer")]),e._v(" "),t("p",[e._v("GitHub Copilot can help you code by offering autocomplete-style suggestions. You can learn how GitHub Copilot works, and what to consider while using GitHub Copilot. GitHub Copilot analyzes the context in the file you are editing, as well as related files, and offers suggestions from within your text editor. GitHub Copilot is powered by OpenAI Codex, a new AI system created by OpenAI.")]),e._v(" "),t("p",[t("strong",[e._v("Copilot works with many code editors including VS Code, Visual Studio, JetBrains IDE, and Neovim.")])]),e._v(" "),t("p",[e._v("Additionally, GitHub Copilot is trained on all languages that appear in public repositories. For each language, the quality of suggestions you receive may depend on the volume and diversity of training data for that language.")]),e._v(" "),t("h3",{attrs:{id:"experiment-with-copilot"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#experiment-with-copilot"}},[e._v("#")]),e._v(" Experiment with CoPilot")]),e._v(" "),t("h2",{attrs:{id:"use-github-copilot-for-prompt-engineering"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#use-github-copilot-for-prompt-engineering"}},[e._v("#")]),e._v(" Use GitHub Copilot for Prompt Engineering")]),e._v(" "),t("p",[e._v("Prompt engineering is the practice of giving an AI model specific instructions in order to produce the results you want. A prompt is a sequence of text or a line of code that can trigger a response from an AI model. You can liken this concept to receiving an essay prompt. For instance, you might receive a prompt to write about a time you overcame a challenge or about a classic book, such as The Great Gatsby. You respond to the prompt based on what you’ve learned. A large language model (or LLM) will behave similarly.")]),e._v(" "),t("p",[e._v("Here’s another illustration of prompt engineering: when I learned to code, I participated in an activity where I gave a robot instructions on how to make a sandwich. It was a fun, silly activity and taught me that:")]),e._v(" "),t("ul",[t("li",[e._v("Computers can only do what you tell them to do.")]),e._v(" "),t("li",[e._v("You need to be very specific with your instructions.")]),e._v(" "),t("li",[e._v("They’re better at taking orders one step at a time.")]),e._v(" "),t("li",[e._v("Algorithms are just a series of instructions.")])]),e._v(" "),t("p",[e._v("For example, if I were to tell the “robot” to make a sandwich, I need to tell it:")]),e._v(" "),t("ul",[t("li",[e._v("Open the bag of bread.")]),e._v(" "),t("li",[e._v("Take the first two slices of bread out of the bag.")]),e._v(" "),t("li",[e._v("Lay the slices of bread side by side on the counter.")]),e._v(" "),t("li",[e._v("Spread peanut butter on one slice of bread with a butter knife.")]),e._v(" "),t("li",[e._v("Etcetera, etcetera, etcetera.")])]),e._v(" "),t("p",[e._v("Without those clear instructions, the robot might do something silly like spread peanut butter on both slices of bread…or it might not do anything at all. The robot doesn’t know what a sandwich is and it doesn’t know how to make one. It just knows how to follow instructions.")]),e._v(" "),t("p",[e._v("Similarly, GitHub Copilot needs clear, step-by-step instructions to generate the code that best helps you.")]),e._v(" "),t("p",[t("a",{attrs:{href:"https://github.blog/2023-06-20-how-to-write-better-prompts-for-github-copilot/",target:"_blank",rel:"noopener noreferrer"}},[e._v("In this prompt guide for GitHub Copilot, two GitHub developer advocates, Rizel and Michelle, will share examples and best practices for communicating your desired results to the AI pair programmer"),t("OutboundLink")],1)]),e._v(" "),t("h2",{attrs:{id:"good-practice-with-co-pilot"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#good-practice-with-co-pilot"}},[e._v("#")]),e._v(" Good practice with Co-Pilot")]),e._v(" "),t("p",[e._v("While GitHub Copilot can be a powerful tool for generating code suggestions, it’s important to remember that it’s not a replacement for your own programming skills and expertise. AI models are only as good as the data they have been trained on, Therefore, it’s important to use these tools as aids and not rely on them entirely. I encourage every user of GitHub Copilot to do the following:")]),e._v(" "),t("ul",[t("li",[e._v("Review code.")]),e._v(" "),t("li",[e._v("Run unit tests, integration tests, and any other programmatic forms of testing code.")]),e._v(" "),t("li",[e._v("Manually test code to ensure it’s working as intended.")]),e._v(" "),t("li",[e._v("Use good coding practices, because GitHub Copilot will follow your coding style and patterns as a guide for its suggestions.")])])])}),[],!1,null,null,null);t.default=a.exports}}]);